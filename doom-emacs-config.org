#+title: Doom Emacs Literate Configuration
#+author: Minye Zhang
#+auto_tangle: t
#+latex_class: article

The repository represents my attempt to write a literate Emacs configuration on
top of the well-known [[https://github.com/doomemacs/doomemacs][Doom Emacs framework]].
This is my first time to try a literature configuration, but not the first to
tweak Emacs - frustration has beaten me down several times for this seemingly
endless task. I hope I could make more progress.

* Preface
** Why Emacs?
I use Emacs mostly for its fantastic [[https://orgmode.org/][org-mode]].
I got to know Emacs when I started to use [[https://www.orgroam.com/][org-roam]]
to practice Zettelkasten method in 2020.

** Why Doom?
Mostly because I have been using it since the very beginning of my Emacs
journey, as introduced by the org-roam community.  It includes a variety of
batteries. The defaults, although opinionated, suit me well.  I have tried a
couple of times setting my own vanilla Emacs, but I always find something
not that comfortable and don't have enough skills, patience and time to
figure out.  So I decide to continue to use Doom, but improve my current
configuration to adopt myself to the extensive editor and exploit this great
framework.

** How is the configuration written?
Since I have little to none Emacs Lisp skills, most of the codes are either
snippets directly copy-pasted from StackOverflow, r/emacs, EmacsChina or Emacs
configuration repositories of others, or naively adapted from them for my own
use case.  Attention has been carefully paid to credit the source near the
relevant code, but it might be blown out in some frustrated nights.

The idea and organization of this literate configuration follows
[[https://github.com/elken/doom][Elken's]] and
[[https://github.com/tecosaur/emacs-config][tecosaur's]].

* Load pre-defined modules with =init.el=
Input method
#+name: doom-init-input
#+begin_src emacs-lisp
;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
(chinese +rime
         +childframe)
;;japanese
layout            ; auie,ctsrnm is the superior home row
#+end_src

Completion
#+name: doom-init-completion
#+begin_src emacs-lisp
;;(company +auto
;;         +capf)   ; the ultimate code completion backend
;;helm            ; the *other* search engine for love and life
;;ido             ; the other *other* search engine...
;;ivy             ; a search engine for love and life
(vertico +icons)  ; the search engine of the future
#+end_src

UI
#+name: doom-init-ui
#+begin_src emacs-lisp
doom              ; what makes DOOM look the way it does
doom-dashboard    ; a nifty splash screen for Emacs
hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
;;indent-guides     ; highlighted indent columns
(ligatures +extra); ligatures and symbols to make your code pretty again
;;minimap           ; show a map of the code on the side
modeline          ; snazzy, Atom-inspired modeline, plus API
;;nav-flash         ; blink cursor line after big motions
ophints           ; highlight the region an operation acts on
(popup +defaults)   ; tame sudden yet inevitable temporary windows
;;tabs              ; a tab bar for Emacs
treemacs          ; a project drawer, like neotree but cooler
unicode           ; extended unicode support for various languages
(vc-gutter +pretty
           +diff-hl) ; vcs diff in the fringe
vi-tilde-fringe   ; fringe tildes to mark beyond EOB
(window-select +numbers)     ; visually switch windows
workspaces        ; tab emulation, persistence & separate workspaces
#+end_src

Editor
#+name: doom-init-editor
#+begin_src emacs-lisp
(evil +everywhere)  ; come to the dark side, we have cookies
file-templates      ; auto-snippets for empty files
fold                ; (nigh) universal code folding
;;(format +onsave)  ; automated prettiness
multiple-cursors  ; editing in many places at once
;;objed             ; text object editing for the innocent
;;parinfer          ; turn lisp into python, sort of
rotate-text       ; cycle region at point between text candidates
snippets          ; my elves. They type so I don't have to
word-wrap
#+end_src

Tools
#+name: doom-init-tools
#+begin_src emacs-lisp
;;ansible
;;biblio            ; Writes a PhD for you (citation needed)
;;debugger          ; FIXME stepping through code, to help you add bugs
direnv
;;docker
editorconfig        ; let someone else argue about tabs vs spaces
;;ein               ; tame Jupyter notebooks with emacs
(eval +overlay)     ; run code, run (also, repls)
(lookup +docsets)   ; navigate your code and its documentation
(lsp +eglot)        ; M-x vscode
(magit +forge)      ; a git porcelain for Emacs
make                ; run make tasks from Emacs
;;pass              ; password manager for nerds
pdf                 ; pdf enhancements
rgb                 ; creating color strings
;;taskrunner        ; taskrunner for all your projects
;;tmux              ; an API for interacting with tmux
tree-sitter         ; syntax and parsing, sitting in a tree...
upload              ; map local to remote projects via ssh/ftp
#+end_src

Langauge support
#+name: doom-init-lang
#+begin_src emacs-lisp
;;(cc +lsp)         ; C > C++ == 1
;;clojure           ; java with a lisp
data                ; config/data formats
;;elm               ; care for a cup of TEA?
(emacs-lisp +treesitter)       ; drown in parentheses
fortran             ; in FORTRAN, GOD is REAL (unless declared INTEGER)
(json +treesitter)  ; At least it ain't XML
javascript          ; all(hope(abandon(ye(who(enter(here))))))
;;julia             ; a better, faster MATLAB
(latex +latexmk
       +cdlatex)    ; writing papers in Emacs has never been so fun
lua               ; one-based indices? one-based indices
markdown            ; writing docs for people to ignore
;;nix               ; I hereby declare "nix geht mehr!"
;;ocaml             ; an objective camel
(org
     +dragndrop
     +gnuplot
     +contacts
     +ipython
     +jupyter
     +present
     +pretty
     +pandoc
     +noter
     +roam2)        ; organize your plain life in plain text
;;plantuml          ; diagrams for confusing people more
python              ; beautiful is better than ugly
;;qt                ; the 'cutest' gui framework ever
rst               ; ReST in peace
ruby
;;(rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
(sh +zsh)           ; she sells {ba,z,fi}sh shells on the C xor
;;swift             ; who asked for emoji variables?
;;web               ; the tubes
yaml              ; JSON, but readable
#+end_src

Emacs
#+name: doom-init-emacs
#+begin_src emacs-lisp
(dired +icons)    ; making dired pretty [functional]
electric          ; smarter, keyword-based electric-indent
(ibuffer +icons)  ; interactive buffer management
(undo +tree)      ; persistent, smarter undo for your inevitable mistakes
vc                ; version-control and Emacs, sitting in a tree
#+end_src

Terminal support
#+name: doom-init-term
#+begin_src emacs-lisp
;;eshell            ; the elisp shell that works everywhere
;;shell             ; simple shell REPL for Emacs
;;term              ; basic terminal emulator for Emacs
vterm             ; the best terminal emulation in Emacs
#+end_src

Syntax/grammaer checkers
#+name: doom-init-checkers
#+begin_src emacs-lisp
syntax              ; tasing you for every semicolon you forget
(spell +flyspell
       +hunspell)   ; tasing you for misspelling mispelling
grammar             ; tasing grammar mistake every you make
#+end_src

Applications.
#+name: doom-init-app
#+begin_src emacs-lisp
calendar
(rss +org)        ; emacs as an RSS reader
#+end_src

Email functionality. For now I am not using it.
#+name: doom-init-email
#+begin_src emacs-lisp
;;(mu4e +org +gmail)
;;notmuch
;;(wanderlust +gmail)
#+end_src

General config.
Since the literate config is not named ~config.org~, and ~init.el~ is also literate,
switch on ~literate~ module will lead to error in doom sync.
#+name: doom-init-config
#+begin_src emacs-lisp
;;literate
(default +bindings +smartparens)
#+end_src

Now put them together and tangle to ~init.el~
#+begin_src emacs-lisp :tangle init.el :noweb no-export :results none
;;; init.el -*- lexical-binding: t; -*-
(doom! :input
       <<doom-init-input>>

       :completion
       <<doom-init-completion>>

       :ui
       <<doom-init-ui>>

       :editor
       <<doom-init-editor>>

       :emacs
       <<doom-init-emacs>>

       :term
       <<doom-init-term>>

       :checkers
       <<doom-init-checkers>>

       :tools
       <<doom-init-tools>>

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       <<doom-init-lang>>

       :email
       <<doom-init-email>>

       :app
       <<doom-init-app>>

       :config
       <<doom-init-config>>
)
#+end_src

* Configuration
** Global
Enable ~lexical-binding~ in the main configuration file ~config.el~ to speed up
#+begin_src emacs-lisp :tangle config.el
;;; config.el -*- lexical-binding: t; -*-
#+end_src

Define myself
#+begin_src emacs-lisp :tangle config.el
(setq user-full-name "Minye Zhang"
      user-mail-address "minyez.physchem@gmail.com")
#+end_src

Add ~lisp~ to ~load-path~ for later importing
#+begin_src emacs-lisp :tangle config.el
(add-to-list 'load-path (concat doom-private-dir "lisp"))
#+end_src

Profiling use-package when environment variable ~EMACS_PROF~ is defined
#+begin_src emacs-lisp :tangle config.el
(if (getenv "EMACS_PROF")
    (setq use-package-verbose t
          use-package-expand-minimally nil
          use-package-compute-statistics t)
  (setq use-package-verbose nil
        use-package-expand-minimally t))
#+end_src

# Define global variables to be used later
# #+begin_src emacs-lisp :tangle config.el
# (defvar my/bibtex-bibliography
#   (expand-file-name (concat "zotero_" (system-name) ".bib") "~/database/")
#   "bibtex file of bibliography")
# #+end_src

#+begin_src emacs-lisp :tangle config.el
(setq confirm-kill-emacs nil)     ; do not ask if I would like to go
#+end_src

** Vairables

Some global variables which are used in further per-package customization
#+begin_src emacs-lisp :tangle lisp/my-variables.el :mkdirp yes
;;; my-variables.el -*- lexical-binding: t; -*-

(defvar my/org-dir
  (expand-file-name "org-roam" "~/Library/CloudStorage/Dropbox")
  "org directory")

(defvar my/bibtex-file
  (expand-file-name "etc/bibliography.bib" my/org-dir)
  "all-in-one bibtex file for referecnes")

(defvar my/literature-note-dir
  (expand-file-name "3_Resource/Paper" my/org-dir)
  "Directory to store the notes of literature")

(provide 'my-variables)
;;; my-variables.el ends here
#+end_src

#+begin_src emacs-lisp :tangle config.el :mkdirp yes
(require 'my-variables)
#+end_src

** Private keybindings
Use key-chord for mapping simultaneously pressed keys to command
#+begin_src emacs-lisp :tangle packages.el :mkdirp yes
(package! key-chord)
#+end_src

#+begin_src emacs-lisp :tangle lisp/my-keybindings.el :mkdirp yes
;;; my-keybindings.el -*- lexical-binding: t; -*-
(use-package! key-chord
  :config
  (key-chord-mode 1)
  ;; https://discourse.doomemacs.org/t/typing-jk-deletes-j-and-returns-to-normal-mode/59
  (with-eval-after-load 'evil-escape
    (key-chord-define-global "jk" 'evil-escape)))

(map! :leader
      (:prefix-map ("e" . "extra-my")
        (:prefix-map ("d" . "drill")
          :desc "org-drill"          "d"   #'org-drill
          :desc "org-drill-resume"   "r"   #'org-drill-resume)
        :desc "org-roam-node-find"   "."   #'org-roam-node-find
        :desc "org-agenda-list"      "a"   #'org-agenda-list
        :desc "Sort entries by todo" "S"   '(lambda () (interactive) (org-sort-entries t ?o))
        :desc "org-schedule"         "s"   #'org-schedule)

        ;; supplement existing map
        (:prefix-map ("t" . "toggle")
          :desc "truncate-lines"       "L"   #'toggle-truncate-lines)
)

(provide 'my-keybindings)
;;; my-keybindings.el ends here
#+end_src

#+begin_src emacs-lisp :tangle config.el :mkdirp yes
(require 'my-keybindings)
#+end_src

** UI
*** Prologue
#+begin_src emacs-lisp :tangle lisp/config-ui.el :mkdirp yes
;;; config-ui.el -*- lexical-binding: t; -*-

(display-time-mode 1) ;; always show time
;; relative visual line, usually better than relative with folded blocks
(setq display-line-numbers-type 'visual)
#+end_src

*** Font
Use Nerd-Font-patched Sarasa font
#+begin_src emacs-lisp :tangle lisp/config-ui.el :mkdirp yes
(let ((font "Sarasa Fixed SC Nerd Font")
      (size 16))
  (setq doom-font (font-spec :family font :size size)
        doom-variable-pitch-font (font-spec :family font :size size)
        ;; disable unicode font size set to resolve too large icon in dashboard/treemacs
        ;;doom-unicode-font (font-spec :family font :size size)
        doom-big-font (font-spec :family font :size (+ size 4))))
#+end_src

*** Theme
Use modus theme by Prot
#+begin_src emacs-lisp :tangle lisp/config-ui.el :mkdirp yes
(use-package! emacs
  :init
  ;; Add all your customizations prior to loading the themes
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs nil
        modus-themes-org-blocks 'tinted-background
	;;; 'gray-background is not clear in modus-vivendi
        modus-themes-region '(bg-only no-extend)
        modus-themes-paren-match '(bold intense)
        modus-themes-links '(neutral-underline background)
        modus-themes-deuteranopia t
        modus-themes-mode-line '(accented borderless (padding . 4) (height . 0.9)))
  :bind ("<f5>" . modus-themes-toggle)
)
(setq doom-theme 'modus-operandi)
#+end_src

*** WIP dashboard
#+begin_src emacs-lisp :tangle lisp/config-ui.el :mkdirp yes
;; dashboard configuration
;; set custom splash image if it exists
(let ((img (expand-file-name "misc/splash-images/favicon.svg" doom-private-dir)))
 (if (file-exists-p img)
   (setq fancy-splash-image img)))

(when (modulep! :ui doom-dashboard)
  ;; remove the footer, i.e. the GitHub icon
  (remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-footer)
  ;; remove short menu
  ;; (remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
  ;; add a new button
  (add-to-list '+doom-dashboard-menu-sections
               '("Browse roam nodes"
                 :icon (nerd-icons-sucicon "nf-custom-orgmode" :face 'doom-dashboard-menu-title)
                 :when (featurep! :lang org +roam2)
                 :face (:inherit (doom-dashboard-menu-title))
                 :action org-roam-node-find))
  ;; remove some of the buttons
  (dolist (btname '("Open project" "Open org-agenda"))
    (assoc-delete-all btname +doom-dashboard-menu-sections))
)
#+end_src

*** Icons

Since [[https://github.com/doomemacs/doomemacs/pull/7411][PR#7411]], Doom Emacs is using nerd-icons instead of all-the-icons.
#+begin_src emacs-lisp :tangle lisp/config-ui.el :mkdirp yes
(use-package! nerd-icons
  :config
  (setq nerd-icons-scale-factor 1.0)
)
#+end_src

*** Treemacs
The configuration, adapted from the [[https://github.com/Alexander-Miller/treemacs#installation][official repository]]
#+begin_src emacs-lisp :tangle lisp/config-ui.el :mkdirp yes
(use-package! treemacs
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "s-0") #'treemacs-select-window))
  :bind
  (:map global-map
        ("s-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag))
  :config
  (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
        treemacs-deferred-git-apply-delay        0.5
        treemacs-directory-name-transformer      #'identity
        treemacs-display-in-side-window          t
        treemacs-eldoc-display                   'simple
        treemacs-file-event-delay                2000
        treemacs-file-extension-regex            treemacs-last-period-regex-value
        treemacs-file-follow-delay               0.2
        treemacs-file-name-transformer           #'identity
        treemacs-follow-after-init               t
        treemacs-expand-after-init               t
        treemacs-find-workspace-method           'find-for-file-or-pick-first
        treemacs-git-command-pipe                ""
        treemacs-goto-tag-strategy               'refetch-index
        treemacs-header-scroll-indicators        '(nil . "^^^^^^")
        treemacs-hide-dot-git-directory          t
        treemacs-indentation                     2
        treemacs-indentation-string              " "
        treemacs-is-never-other-window           nil
        treemacs-max-git-entries                 5000
        treemacs-missing-project-action          'ask
        treemacs-move-forward-on-expand          nil
        treemacs-no-png-images                   nil
        treemacs-no-delete-other-windows         t
        treemacs-project-follow-cleanup          nil
        treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
        treemacs-position                        'left
        treemacs-read-string-input               'from-child-frame
        treemacs-recenter-distance               0.1
        treemacs-recenter-after-file-follow      nil
        treemacs-recenter-after-tag-follow       nil
        treemacs-recenter-after-project-jump     'always
        treemacs-recenter-after-project-expand   'on-distance
        treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
        treemacs-project-follow-into-home        nil
        treemacs-show-cursor                     nil
        treemacs-show-hidden-files               t
        treemacs-silent-filewatch                nil
        treemacs-silent-refresh                  nil
        treemacs-sorting                         'alphabetic-asc
        treemacs-select-when-already-in-treemacs 'move-back
        treemacs-space-between-root-nodes        t
        treemacs-tag-follow-cleanup              t
        treemacs-tag-follow-delay                1.5
        treemacs-text-scale                      nil
        treemacs-user-mode-line-format           nil
        treemacs-user-header-line-format         nil
        treemacs-wide-toggle-width               70
        treemacs-width                           35
        treemacs-width-increment                 1
        treemacs-width-is-initially-locked       t
        treemacs-workspace-switch-cleanup        nil)

  ;; The default width and height of the icons is 22 pixels. If you are
  ;; using a Hi-DPI display, uncomment this to double the icon size.
  ;;(treemacs-resize-icons 44)

  ;;(treemacs-follow-mode t)
  (treemacs-filewatch-mode t)
  (treemacs-fringe-indicator-mode 'always)
  (when treemacs-python-executable
    (treemacs-git-commit-diff-mode t))

  (pcase (cons (not (null (executable-find "git")))
               (not (null treemacs-python-executable)))
    (`(t . t)
     (treemacs-git-mode 'deferred))
    (`(t . _)
     (treemacs-git-mode 'simple)))

  (treemacs-hide-gitignored-files-mode nil)
)
#+end_src
Add key binding to doom map
#+begin_src emacs-lisp :tangle lisp/config-ui.el :mkdirp yes
(map! :leader
      (:prefix-map ("t" . "toggle")
       (:when (modulep! :ui treemacs)
        :desc "treemacs" "t" #'treemacs)))
#+end_src

*** Window selection
Map window selection to simpler key combination.
#+begin_src emacs-lisp :tangle lisp/config-ui.el :mkdirp yes
(when (modulep! :ui window-select +numbers)
 (use-package! winum

  :bind
  (:map global-map
        ("s-0" . treemacs-select-window)
        ("s-1" . winum-select-window-1)
        ("s-2" . winum-select-window-2)
        ("s-3" . winum-select-window-3)
        ("s-4" . winum-select-window-4)
        ("s-5" . winum-select-window-5)
        ("s-6" . winum-select-window-6)
        ("s-7" . winum-select-window-7)
        ("s-8" . winum-select-window-8)
        ("s-9" . winum-select-window-9))
  (:map evil-normal-state-map
        ("s-0" . treemacs-select-window)
        ("s-1" . winum-select-window-1)
        ("s-2" . winum-select-window-2)
        ("s-3" . winum-select-window-3)
        ("s-4" . winum-select-window-4)
        ("s-5" . winum-select-window-5)
        ("s-6" . winum-select-window-6)
        ("s-7" . winum-select-window-7)
        ("s-8" . winum-select-window-8)
        ("s-9" . winum-select-window-9))))
#+end_src

*** doom-modeline

#+begin_src emacs-lisp :tangle lisp/config-ui.el :mkdirp yes
(when (modulep! :ui modeline)
  (use-package! doom-modeline
    :config
    (setq doom-modeline-time t
          doom-modeline-enable-word-count t
          doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))))
#+end_src

*** hl-todo
Switch on ~hl-todo-mode~ for selected modes
#+begin_src emacs-lisp :tangle lisp/config-ui.el :mkdirp yes
(use-package! hl-todo
  :hook
  ((org-mode . hl-todo-mode)
   (markdown-mode . hl-todo-mode)
   (prog-mode . hl-todo-mode)))
#+end_src

*** Epilogue
#+begin_src emacs-lisp :tangle lisp/config-ui.el :mkdirp yes
(provide 'config-ui)
;;; config-ui.el ends here
#+end_src

#+begin_src emacs-lisp :tangle config.el :mkdirp yes
(require 'config-ui)
#+end_src

** Evil
#+begin_src emacs-lisp :tangle lisp/config-evil.el :mkdirp yes
;;; config-evil.el -*- lexical-binding: t; -*-
#+end_src

#+begin_src emacs-lisp :tangle lisp/config-evil.el :mkdirp yes
(use-package! evil
  :config
  (evil-select-search-module 'evil-search-module 'evil-search)
  (evil-set-initial-state 'dired-mode 'normal)
  (evil-set-initial-state 'elpaca-ui-mode 'motion)
  (dolist (mode '(delve-mode
                  elfeed-search-mode
                  easy-hugo-mode
                  eshell-mode
                  git-rebase-mode
                  pyim-dict-manager-mode
                  vterm-mode
                  term-mode
                  calc-mode))
    (evil-set-initial-state mode 'emacs)))
#+end_src

#+begin_src emacs-lisp :tangle lisp/config-evil.el :mkdirp yes
(provide 'config-evil)
;;; config-evil.el ends here
#+end_src

#+begin_src emacs-lisp :tangle config.el
(require 'config-evil)
#+end_src

** CJK input

#+begin_src emacs-lisp :tangle lisp/config-cjk.el :mkdirp yes
;;; config-cjk.el -*- lexical-binding: t; -*-
#+end_src

Add keybindings for quick change between input methods
#+begin_src emacs-lisp :tangle lisp/config-cjk.el :mkdirp yes
(map! :leader
      (:prefix-map ("e" . "extra-my")
        (:prefix-map ("i" . "input")
         :desc "Chinese (Pyim)"  "c"  '(lambda () (interactive) (set-input-method "pyim"))
         :desc "Japanese"        "j"  '(lambda () (interactive) (set-input-method "japanese"))
         :desc "Tex"             "t"  '(lambda () (interactive) (set-input-method "TeX"))
)))
#+end_src

Use Pyim for Chinese input.
Use the latest pyim version
#+begin_src emacs-lisp :tangle packages.el :mkdirp yes
(unpin! pyim)
(unpin! posframe)
#+end_src
Pyim configuration.
#+begin_src emacs-lisp :tangle lisp/config-cjk.el :mkdirp yes
(use-package! pyim
  :custom
  ;; Disable word search in current buffer.
  (pyim-candidates-search-buffer-p nil)
  :config
  (global-set-key (kbd "M-\\") 'pyim-convert-string-at-point)
  (setq pyim-page-tooltip '(posframe popup))
  (setq pyim-dcache-auto-update t)
  ;; pyim-shuangping is derived from xiaohe-shuangpin
  ;;(pyim-default-scheme 'pyim-shuangpin)
  ;; disable pyim-outcome-trigger for pyim-shuangpin otherwise cannot type o for 欧
  ;;(setq pyim-outcome-trigger nil)
  (pyim-default-scheme 'xiaohe-shuangpin)
  (setq pyim-page-length 9)
  ;; 中文使用全角标点，英文使用半角标点。
  (setq pyim-punctuation-translate-p '(auto yes no))
  ;; 加入个人词库，包括发音和词频。
  (setq my/personal-dicts
        '(("手动记录" . "manual_personal.pyim")
          ("搜狗导出 (2022-02-19)" . "sougou_out_2022_02_19.pyim")))
  (dolist (elem my/personal-dicts)
    (add-to-list 'pyim-dicts
        `(:name ,(car elem)
          :file ,(concat doom-private-dir "dict/" (cdr elem)))))
  ;; painless CN/EN switch by probe
  (defun my/pyim-probe-org-src-block ()
    "自定义探针, 进入 org-mode source block 之后自动切换到英文输入"
    (when (eq major-mode 'org-mode)
      (not (eq (org-in-src-block-p) nil)))
    )
  ;; auto-english 会根据之前的字符来判断是否切换到英文输入, 输入空格时自动切换到英文
  ;; 具体可用 describe-function 查看 docstring 来了解
  ;; 在 latex 块和源码块中全部为英文输入
  (setq-default pyim-english-input-switch-functions
                '(pyim-probe-auto-english
                  pyim-probe-org-latex-mode
                  my/pyim-probe-org-src-block
                  ; pyim-probe-org-structure-template
                  pyim-probe-program-mode))
  ;; 半角标点。主要情形是在行首使用 yasnippet 时有用
  (setq-default pyim-punctuation-half-width-functions
              '(pyim-probe-punctuation-line-beginning pyim-probe-punctuation-after-punctuation))
  ;; Enable key-cord when pyim input is switched on,
  ;; This is very useful in evil-insert-mode, if 
  ;; from https://emacs-china.org/t/pyim-key-chord-pyim/20633/12
  ;; 这比之前用的 pyim-self-insert-command 延迟更长一点，但泛用性更高
  (defun pyim--enable-key-chord-fun (orig key)
    (if (key-chord-lookup-key (vector 'key-chord key))
        (let ((result (key-chord-input-method key)))
          (if (eq (car result) 'key-chord)
              result
            (funcall orig key)))
      (funcall orig key)))
  (advice-add 'pyim-input-method :around #'pyim--enable-key-chord-fun)
)
#+end_src

Finish the configuration
#+begin_src emacs-lisp :tangle lisp/config-cjk.el :mkdirp yes
(provide 'config-cjk)
;;; config-cjk.el ends here
#+end_src
and add the main file
#+begin_src emacs-lisp :tangle config.el
(require 'config-cjk)
#+end_src

** TODO Completion

** Editing

*** undo-tree
Suppress the warning message saying that undo history could not be
loaded because the file changed outside of Emacs.
This is usually the case when some file is edited on other platforms
and updated from git/cloud locally.
Copied from raxod502's configuration, see
[[https://github.com/radian-software/radian/issues/158][radian#158]]
#+begin_src emacs-lisp :tangle lisp/config-undo-tree.el :mkdirp yes
;;; config-undo-tree.el -*- lexical-binding: t; -*-

(after! undo-tree
  (defun radian--undo-tree-suppress-undo-history-saved-message
        (undo-tree-save-history &rest args)
      (let ((inhibit-message t))
        (apply undo-tree-save-history args)))

  (defun radian--undo-tree-suppress-buffer-modified-message
      (undo-tree-load-history &rest args)
    (let ((inhibit-message t))
      (apply undo-tree-load-history args)))

  (advice-add #'undo-tree-load-history :around
              #'radian--undo-tree-suppress-buffer-modified-message))

(provide 'config-undo-tree)
;;; config-undo-tree.el ends here
#+end_src

#+begin_src emacs-lisp :tangle config.el
(require 'config-undo-tree)
#+end_src

*** Checkers

**** Prologue
#+begin_src emacs-lisp :tangle lisp/config-checker.el :mkdirp yes
;;; config-checker.el -*- lexical-binding: t; -*-
#+end_src

**** ispell
#+begin_src emacs-lisp :tangle lisp/config-checker.el :mkdirp yes
(when (modulep! :checkers spell)
  (after! ispell
    (setq ispell-personal-dictionary (concat doom-private-dir "words"))
  )
)
#+end_src

**** grammar
Disable language-tool in grammar module
#+begin_src emacs-lisp :tangle packages.el :mkdirp yes
(if (modulep! :checkers grammar)
  (package! langtool :disable t))
#+end_src

**** Epilogue
#+begin_src emacs-lisp :tangle lisp/config-checker.el :mkdirp yes
(provide 'config-checker)
;;; config-checker.el ends here
#+end_src

#+begin_src emacs-lisp :tangle config.el :mkdirp yes
(require 'config-checker)
#+end_src

** Org Mode
*** Basics
**** Custom variables and functions
#+begin_src emacs-lisp :tangle lisp/config-org.el :mkdirp yes
;;; config-org.el -*- lexical-binding: t; -*-

;; adapted from https://emacs-china.org/t/topic/6601/4
(defun my/org-insert-image ()
  "Insert PNG image from the clipboard to the buffer by using =pngpaste= (macos) or =xclip= (linux)

The image will be created under 'images' directory in =org-directory=
with the name from user input. If image with the same name exists, the paste
will be stopped, but the link will still be created.
Note that =pngpaste=/=xclip= should be installed outside Emacs"
  (interactive)
  (let*
    (
     (cpcmd (pcase system-type
        ('darwin "pngpaste %s")
        ('gnu/linux "xclip -selection clipboard -t image/png -o > %s")
        ))
     (path (concat my/org-dir "/images/"))
     (fn (format "%s" (read-string "Enter image name (w/o png):")))
  	   (image-file (concat path fn ".png"))
    )
      (if (not (file-exists-p path)) (mkdir path))
      (if (file-exists-p image-file)
  	(message (format "Warning: found image %s.png in %s" fn path))
              (if cpcmd (shell-command (format cpcmd image-file))
  	              (message "Warning: clipboard -> file not suppored on this OS")
                ))
       (insert (format "#+name: fig:%s\n" fn))
       (insert "#+caption:\n")
       (insert ":IMAGE:\n")
       (insert "#+attr_org: :width 300\n")
       (insert "#+attr_latex: :width 0.6\\linewidth\n")
   (org-insert-link nil (concat "file:./images/" fn ".png") "")
       ;(insert "\n:PROPERTIES:\n:CREATED: " (format-time-string "[%Y-%m-%d %a %H:%M]") "\n:END:\n")
       (insert "\n:END:")
       ;; may add further elisp expression to suppress interaction for description
  ) ;; (org-display-inline-images) ;; inline显示图片
)

(defun my/org-sort-entries-todo-deadline-level ()
  "Key generation function for sorting org entries by TODO state, deadline and priority level"
  (interactive))


(defun my/org-goto-today-node (&optional PREPEND DTFORMAT)
  "go to the node with the time string of today in DTFORMAT as heading"
  (let* ((prepend  PREPEND)
         (dtformat (if DTFORMAT DTFORMAT "%Y-%m-%d %a"))
         (headline (format-time-string dtformat (current-time))))
    ;; following code copied from org-capture.el L983
    (widen)
    (goto-char (point-min)) ;;; get to the very beginning in the file
    (if (re-search-forward (format org-complex-heading-regexp-format
                                   (regexp-quote headline))
                           nil t)
        (progn
          (unless prepend (org-end-of-subtree) (insert "\n"))
          (insert "\n"))
      ;; head not found, create a new headline after the buffer if it is not empty
      (goto-char (point-max))
      (unless (bolp) (insert "\n"))
      (insert "* " headline "\n"))))

(map!
  :nv "SPC m u" #'outline-up-heading)
#+end_src

**** Main setting
#+begin_src emacs-lisp :tangle lisp/config-org.el :mkdirp yes
(use-package! org
  :init
  (setq org-directory my/org-dir)
  (setq org-fold-core-style 'overlays
        org-fold-catch-invisible-edits 'show)
  :hook
  ((org-mode . org-indent-mode)
   (org-mode . visual-line-mode)
   (before-save . org-update-all-dblocks))
  :bind
  (:map org-mode-map
        ("C-c l" . org-insert-link)
        ("C-c m l l" . org-insert-link) ; similar to org-clip
        ("C-c m i" . org-toggle-item)
        ("C-c m h" . org-toggle-heading)
        ("C-c m o" . org-set-property)
        ("C-c i" . my/org-insert-image)
        ("C-c C-i" . org-time-stamp-inactive)
        ("C-c e v" . (lambda () "make verbatim"       (interactive) (org-emphasize 61)))  ; =
        ("C-c e b" . (lambda () "make bold"           (interactive) (org-emphasize 42)))  ; *
        ("C-c e s" . (lambda () "make strike-through" (interactive) (org-emphasize 43)))  ; +
        ("C-c e i" . (lambda () "make italic"         (interactive) (org-emphasize 47)))  ; /
        ("C-c e u" . (lambda () "make underline"      (interactive) (org-emphasize 95)))  ; _
        ("C-c e c" . (lambda () "make code"           (interactive) (org-emphasize 126))) ; ~
      )
  :config
  (map! :map org-mode-map
        :nv "SPC d"     #'+org/remove-link
        :nv "SPC f A"   #'org-save-all-org-buffers
        :nv "SPC a t"   #'org-agenda-todo
        :nv "DEL"       #'org-mark-ring-goto
        :nv "M-j"       #'org-metadown
        :nv "M-k"       #'org-metaup
        :nv "M-n"       #'org-next-link
        :nv "M-p"       #'org-previous-link
        :nv "SPC v n"   #'org-narrow-to-subtree
        :nv "SPC v w"   #'widen
        )
  (setq org-src-tab-acts-natively nil)
  ;; hide emphasis markers, display when move to the line (enabled by org-appear)
  (setq org-hide-emphasis-markers nil)
  (setq org-archive-location (concat org-directory "/archive.org::* From %s"))
  (setq org-default-notes-file "todos.org")
  (setq org-footnote-auto-adjust t)
  (setq org-tags-column -80)
  (setq org-extend-today-until 4)    ;; end of each day
  (setq org-pretty-entities t
        org-pretty-entities-include-sub-superscripts nil)
  (setq org-clock-persist 'history
        org-clock-idle-time 10
        org-clock-mode-line-total 'current  ; show current clocking time in mode-line
                                            ; 'auto for total; 'today
  )
  (setq org-enforce-todo-checkbox-dependencies t)
  ;; highlight latex environment
  ; (setq org-highlight-latex-and-related '(native script entities))
  ; (setq org-highlight-latex-and-related '(native script))

  ;; agenda
  (setq org-agenda-files (concat org-directory "/org-agenda.org")
        org-agenda-skip-scheduled-if-done 't
        org-agenda-dim-blocked-tasks nil
        org-agenda-inhibit-startup 't
        ; org-log-into-drawer 't
        org-log-done 'time
        org-agenda-use-tag-inheritance '(search timeline agenda)
        org-agenda-window-setup 'reorganize-frame
  )

  ;;; capture templates
  (setq org-capture-templates
        `(
          ("L"   "Language")
          ("Le"  "English")
          ("Lev" "English vocaburary" entry
               (file "3_Resources/English/english_vocabulary.org")
               "* %? :drill:\n** Examples :ignore:\n** Origin :ignore:")
          ("Lg"  "German" entry)
          ("Lgv" "German vocaburary" entry
               (file "3_Resources/German/german_vocabulary.org")
               "* %? :drill:\n:PROPERTIES:\n:DRILL_CARD_TYPE: hide1_firstmore\n:END:[||GE]: [||EN,CN]")
          ("l"  "Log")
          ("lj" "Journal" plain
                (file+function "2_Area/Log/journal.org" my/org-goto-today-node)
                "%<%H:%M> %?")
          ("lw" "Work" plain
                (file+function "2_Area/Log/work.org" my/org-goto-today-node)
                "%<%H:%M> %?")
         ))
  ;; org-table related.
  ;; commonly used constants for formulas
  (setq org-table-formula-constants
        '(("pi" . "3.14159265358")
          ("RY" . "13.60569301")
          ("HBAR" . "1.0545718e-34")
          ("EPS0" . "8.8541878128e−12")
          ("FSCA" . "0.0072973525664")
          ("KB" . "1.38064852e-23")
          ("CLIGHT" . "2.99792458e8")
          ("CE" . "1.6021766208e-19") ; electron charge
          ("BOHR2ANG" . "0.5291772")
          ("ANG2M" . "1e-10")
          ("EV2J" . "1.6021766208e-19")
          ("HA2EV" . "27.21138602")
          ("THZ2HA" . "1.519829846e-4") ; 10^12 h in Ha unit
          ))
  ;; default precision of formula results
  (plist-put org-calc-default-modes 'calc-internal-prec 20)
  (plist-put org-calc-default-modes 'calc-float-format '(float 12))

  ;; TODO keywords
  ; each state with ! is recorded as state change, @ require note
  (setq org-todo-keywords '((sequence "TODO(t)" "WIP(i)" "HOLD(h@)" "WAIT(w!)" "REV(r!)" "|" "DONE(d)" "CANCELLED(c!)"))
        org-todo-keyword-faces
          '(("REV" :foreground "#ff9933" :weight bold)
            ("WAIT" :foreground  "#9f7efe" :underline t)
            ("HOLD" :foreground  "black" :box t)
            ("WIP" :foreground "#0098dd" :weight bold)
            ("TODO" :foreground "#8c1400" :weight bold)
            ("DONE" :foreground "#50a14f")
            ("CANCELLED" :foreground "#ff6480" :strike-through t)
             )
  )
  ;; faces for org priority, from https://emacs.stackexchange.com/a/17405
  (setq org-priority-faces '((?A . (:foreground "red" :weight bold))
                             (?B . (:foreground "#C88523"))
                             (?C . (:foreground "blue"))
                             (?D . (:foreground "#4B7A47"))))

  ;; more link abbreviaiton
  (let ((link-abbrev-l '(("ytb" . "https://www.youtube.com/watch?v=%s")
                         ("mp" . "https://next-gen.materialsproject.org/materials/mp-%s")
                         ("isbn" . "http://books.google.com/books?vid=ISBN%s")
                         ("issn" . "http://books.google.com/books?vid=ISSN%s")
                         ("cnwiki" . "https://zh.wikipedia.org/zh-cn/%s")
                         ("arxiv" . "https://arxiv.org/abs/%s"))))
    (dolist (elem link-abbrev-l) (add-to-list 'org-link-abbrev-alist elem)))

  ;; org-babel related
  (setq org-babel-results-keyword "results")
  (setq org-confirm-babel-evaluate nil)  ;; do not need to confirm when evaluate

  ;; disable some tags from inheriting to descendants
  (dolist (elem '("noter" "Reference" "Book" "bookrev" "drill"))
    (add-to-list 'org-tags-exclude-from-inheritance elem))
)
#+end_src

**** Create custom ID of an entry according to the title

#+begin_src emacs-lisp :tangle lisp/config-org.el :mkdirp yes
(after! org
  ;; create ID if there is no CUSTOM_ID
  (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)

  ;; add a CUSTOM_ID according to the name of heading
  ;; adapted from https://writequit.org/articles/emacs-org-mode-generate-ids.html
  ;; the original one use id from org-id-new, which creates a non-human-readable id
  (defun my/org-custom-id-get (&optional pom create)
    "Get the CUSTOM_ID property of the entry at point-or-marker POM.
     If POM is nil, refer to the entry at point. If the entry does
     not have an CUSTOM_ID, the function returns nil. However, when
     CREATE is non nil, create a CUSTOM_ID if none is present.
     In any case, the CUSTOM_ID of the entry is returned."
    (interactive)
    (org-with-point-at pom
      (let ((id (org-entry-get nil "CUSTOM_ID")))
        (cond
         ((and id (stringp id) (string-match "\\S-" id))
          id)
         (create
          ;; naively remove emphasis
          (setq id (replace-regexp-in-string "[~*+]" "" (org-entry-get nil "ITEM")))
          (org-entry-put pom "CUSTOM_ID" id)
          (org-id-add-location id (buffer-file-name (buffer-base-buffer)))
          id)))))
  (map! :leader
        (:prefix-map ("e" . "extra-my")
          (:prefix-map ("p" . "property")
           :desc "Custom ID"  "i"  '(lambda () (interactive) (my/org-custom-id-get nil 'create)))))
)
#+end_src

**** ~org-cliplink~ for quick extraction of link
#+begin_src emacs-lisp :tangle lisp/config-org.el :mkdirp yes
(use-package! org-cliplink
  :after org
  :bind
  (:map org-mode-map
        ("C-c m l c" . org-cliplink)))
#+end_src

**** ~org-appear~ for showing raw content of rendered markup at cursor.
#+begin_src emacs-lisp :tangle lisp/config-org.el :mkdirp yes
(use-package! org-appear
  :hook
  (org-mode . org-appear-mode)
  :config
  (setq org-appear-autolinks t      ;; not working right now in Doom, which is a bit annoying
        org-link-descriptive nil    ;; so show the full link
        org-appear-autoentities t 
        org-appear-inside-latex t)  ;; show original/unprettified symbols in latex envrionment
)
#+end_src

Unpin the org-appear version to resolve not-working problem of ~org-appear-autolinks~
#+begin_src emacs-lisp :tangle packages.el :mkdirp yes
(unpin! org-appear)
#+end_src

**** Set ~org-download~ image directory
#+begin_src emacs-lisp :tangle lisp/config-org.el :mkdirp yes
(use-package! org-download
  :config
  (setq org-download-method 'directory)
  ; from https://emacs.stackexchange.com/questions/75983/how-to-format-org-downloads-image-saving-directorys
  (defun my-org-download-set-dir ()
    "Set `org-download-image-dir` to the directory of the current buffer's file."
    (setq-local org-download-image-dir (concat "./assets/" (file-name-base buffer-file-name))))
  (add-hook 'org-mode-hook 'my-org-download-set-dir)
  (add-hook 'dired-mode-hook 'org-download-enable)
)
#+end_src

#+begin_src emacs-lisp :tangle lisp/config-org.el :mkdirp yes
(after! org-archive
  (setq org-archive-mark-done t) ; change subtree state to DONE when archived
)
#+end_src

**** Finishes

#+begin_src emacs-lisp :tangle lisp/config-org.el :mkdirp yes
(provide 'config-org)
;;; config-org.el ends here
#+end_src
load it in the main config file.
#+begin_src emacs-lisp :tangle config.el
(require 'config-org)
#+end_src

**** Disable ~org-fancy-priorities~ introduced by the ~+pretty~ feature

since the symbols introduced are a bit too fancy for me.
#+begin_src emacs-lisp :tangle packages.el :mkdirp yes
(if (modulep! :lang org +pretty)
    (package! org-fancy-priorities :disable t))
#+end_src

*** Recurring task using org-recur

Support by [[https://github.com/mrcnski/org-recur][~org-recur~]] package

#+begin_src emacs-lisp :tangle packages.el :mkdirp yes
(package! org-recur
  :recipe (:host github :repo "mrcnski/org-recur"))
#+end_src

#+begin_src emacs-lisp :tangle lisp/config-org-recur.el :mkdirp yes
;;; config-org-recur.el -*- lexical-binding: t; -*-

(use-package! org-recur
  :hook ((org-mode . org-recur-mode)
         (org-agenda-mode . org-recur-agenda-mode))
  :config
  (define-key org-recur-mode-map (kbd "C-c d") 'org-recur-finish)

  ;; Rebind the 'd' key in org-agenda (default: `org-agenda-day-view').
  (define-key org-recur-agenda-mode-map (kbd "d") 'org-recur-finish)
  (define-key org-recur-agenda-mode-map (kbd "C-c d") 'org-recur-finish)

  (setq org-recur-finish-done t
        org-recur-finish-archive t))

(provide 'config-org-recur)
;;; config-org-recur.el ends here
#+end_src

#+begin_src emacs-lisp :tangle config.el :mkdirp yes
(require 'config-org-recur)
#+end_src

*** ~org-ref~ and related packages for scientific writing

Before I was using version 2. Now I would like to give version 3 a try.

First install ~org-ref~ and ~bibtex-completion~.
Note the Doom's ~biblio~ module can also be used to install ~bibtex-completion~,
only when either ~ivy~ or ~helm~ completion engine is activated.
Since I am using ~vertico~, I have to install it manually.
As a replacement to ~helm-bibtex~ or ~ivy-bibtex~, ~citar~ package is used.
#+begin_src emacs-lisp :tangle packages.el :mkdirp yes
(package! org-ref
  :recipe (:host github :repo "jkitchin/org-ref"))
(package! bibtex-completion)
(package! citar)
#+end_src

Configure the ~bibtex-completion~ package, for notes searching and bibliography source
#+begin_src emacs-lisp :tangle lisp/config-org-ref.el :mkdirp yes
;;; config-org-ref.el -*- lexical-binding: t; -*-
(use-package! bibtex-completion
  :config
  (setq bibtex-completion-notes-path my/literature-note-dir
        bibtex-completion-bibliography (list my/bibtex-file)
        bibtex-completion-pdf-field "file"
        bibtex-completion-additional-search-fields '(keywords journaltitle)
  )
)
#+end_src

Configure the ~org-ref~ package. Simply add a shortcut to insert a citation link.
#+begin_src emacs-lisp :tangle lisp/config-org-ref.el :mkdirp yes
(use-package! org-ref
  :config
  (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
)
#+end_src

~citar~
#+begin_src emacs-lisp :tangle lisp/config-org-ref.el :mkdirp yes
(use-package citar
  :custom
  (citar-bibliography (list my/bibtex-file))
  (citar-notes-paths (list my/literature-note-dir))
  :config
  ;; use citeproc to generate in-text reference
  (setq citar-format-reference-function 'citar-citeproc-format-reference
        citar-citeproc-csl-styles-dir (expand-file-name "csl" doom-private-dir)
        citar-citeproc-csl-style "aps-modified.csl")
)
#+end_src

Conclude the configuration
#+begin_src emacs-lisp :tangle lisp/config-org-ref.el :mkdirp yes
(provide 'config-org-ref)
;;; config-org-ref.el ends here
#+end_src
and add it to the main config file
#+begin_src emacs-lisp :tangle config.el :mkdirp yes
(require 'config-org-ref)
#+end_src

*** Drill
The ~org-drill~ package is used as an alternative to Anki for spaced repetition to memorize things.
#+begin_src emacs-lisp :tangle packages.el :mkdirp yes
(package! org-drill
  :recipe (:host gitlab :repo "phillord/org-drill"))
#+end_src

#+begin_src emacs-lisp :tangle lisp/config-org-drill.el :mkdirp yes
;;; config-org-drill.el -*- lexical-binding: t; -*-
(use-package! org-drill
  :after org
  :commands org-drill org-drill-resume
  :config
  (setq org-drill-scope 'directory)
  (setq org-drill-spaced-repetition-algorithm 'sm2)
  (setq org-drill-adjust-intervals-for-early-and-late-repetitions-p t)
  (setq org-drill-add-random-noise-to-intervals-p t)
  ;; reduce space, repeat more
  (setq org-drill-learn-fraction 0.30)
)

(provide 'config-org-drill)
;;; config-org-drill.el ends here
#+end_src

#+begin_src emacs-lisp :tangle config.el :mkdirp yes
(require 'config-org-drill)
#+end_src

*** Org export ~ox~

**** Prologue
#+begin_src emacs-lisp :tangle lisp/config-ox.el :mkdirp yes
;;; config-ox.el -*- lexical-binding: t; -*-
(require 's)
#+end_src

**** General configuration for all languages

#+begin_src emacs-lisp :tangle lisp/config-ox.el :mkdirp yes
(after! ox
  (setq org-export-broken-links 'mark)
)
#+end_src

**** Extra functionality by ~ox-extra~
#+begin_src emacs-lisp :tangle lisp/config-ox.el :mkdirp yes
(use-package! ox-extra
  :after ox
  :config
  (ox-extras-activate '(ignore-headlines)))
#+end_src

**** LaTeX/Beamer
First define two variables for handling headers for latex export

#+begin_src emacs-lisp :tangle lisp/config-ox.el :mkdirp yes
(defvar my/org-latex-classes-common-header-passoptions
  (s-join "\n"
    '("\\PassOptionsToPackage{dvipsnames,x11names,table}{xcolor}"
      "\\PassOptionsToPackage{colorlinks=true,linkcolor=,filecolor=Red,citecolor=Green,urlcolor=Rhodamine,pdfborder={0 0 0},breaklinks=true,linktoc=all}{hyperref}"))
  "PassOptions setting before document class, included in org-latex-classes for exporting org to latex")

(defvar my/org-latex-classes-common-header-after-default-pkgs
  (s-join "\n"
    '("% redefine quote environment - blockquote from eisvogel"
      "\\definecolor{bg}{rgb}{0.95,0.95,0.95}"
      "\\definecolor{bq-border}{RGB}{0, 63, 126}"
      "\\newmdenv[rightline=false,bottomline=false,topline=false,linewidth=3pt,backgroundcolor=bg,%"
      "           linecolor=bq-border,skipabove=\\parskip]{customblockquote}"
      "\\renewenvironment{quote}{\\begin{customblockquote}\\itshape\\list{}{\\rightmargin=6pt\\leftmargin=6pt}%"
      "\\item\\relax\\ignorespaces}{\\unskip\\unskip\\endlist\\end{customblockquote}}"
      "\\let\\Oldtextbullet\\textbullet"
      "\\renewcommand{\\textbullet}{\\textcolor{bq-border}{\\Oldtextbullet}}"
      "% compact itemize by paralist packages"
      "\\usepackage{paralist}"
      "\\let\\itemize\\compactitem"
      "\\let\\description\\compactdesc"
      "\\let\\enumerate\\compactenum"
      ))
  "Headers after default packages setting, included in org-latex-classes for exporting org to latex")
#+end_src

#+begin_src emacs-lisp :tangle lisp/config-ox.el :mkdirp yes
(use-package! ox-latex
  :bind
  ("C-c x l" . org-latex-export-to-latex)
  ("C-c x o" . org-latex-export-to-pdf)
  :config

  ;; use latexmk to automate toolchain
  (setq org-latex-pdf-process '("latexmk -latexoption=\"-interaction=nonstopmode -shell-escape\" -pdf -pdflatex=%latex -bibtex -f %f"))

  ;; prefer custom label
  (setq org-latex-prefer-user-labels t)

  ;; remove default hyperset with author names included
  ;; for local variable setup, use for each file
  ;; # -*- org-latex-hyperref-template: nil; -*-

  ;; default packages to load right after documentclass at first
  (setq org-latex-default-packages-alist
    '(
      ("" "amsmath" t) ; to avoid iint and iiint error
      ("" "amssymb" t)
      ("" "wasysym" t) ; last to avoid iint and iint error
      ("AUTO" "inputenc"  t ("pdflatex"))
      ("T1"   "fontenc"   t ("pdflatex"))
      (""     "CJKutf8"   t ("pdflatex"))
      (""     "ifxetex"   nil)
      (""     "xeCJK"     nil ("xelatex", "xetex"))
      (""     "fontspec"  nil ("xelatex", "xetex", "lualatex", "luatex"))
      (""     "microtype"  nil) ; for typographic refinements
      (""     "graphicx"  t)
      (""     "xcolor"  t)
      ; ("nottoc,numbib"     "tocbibind" nil)
      ; corresponding to "setq org-latex-listings t"
      ; (""           "listings"   nil)
      ; but minted is better to use
      ("newfloat,cache=true"   "minted"   nil)
      (""     "grffile"   t)
      ; (""     "longtable" nil)
      (""     "mdframed" nil)   ; for creating blockquote
      (""     "float" nil)
      (""     "wrapfig"   nil)
      (""     "subfig"    nil)
      (""     "rotating"  nil)
      ("normalem" "ulem"  t)    ; strikeout
      (""     "textcomp"  t)
      (""     "capt-of"   nil)
      ("font={small},skip=1pt"     "caption"   nil)
      (""     "parskip"   nil)  ; better paragraph spacing
      (""     "booktabs"   nil) ; better table
	 )
  )

  ; packages to load at last
  (setq org-latex-packages-alist
    '(
      ; hyperref and cleverf should be the last packages to load
      ("" "hyperref"  nil)
      ("" "cleveref"  nil)
     )
  )

  ; customized classes for latex export
  (setq org-latex-classes
               `(
                ("article"
                  ,(s-join "\n"
                      `(
                         ,my/org-latex-classes-common-header-passoptions
                         "\\documentclass[11pt,a4paper]{article}"
                         "[DEFAULT-PACKAGES]"
                         ,my/org-latex-classes-common-header-after-default-pkgs
                         "[EXTRA]"
                         "[PACKAGES]"))
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
                )
  )
)
#+end_src

**** Epilogue
#+begin_src emacs-lisp :tangle lisp/config-ox.el :mkdirp yes
(provide 'config-ox)
;;; config-ox.el ends here
#+end_src

#+begin_src emacs-lisp :tangle config.el
(require 'config-ox)
#+end_src

*** Presentation
#+begin_src emacs-lisp :tangle lisp/config-org-present.el :mkdirp yes
;;; config-org-present.el -*- lexical-binding: t; -*-
(use-package! org-tree-slide
  :after org
  :bind
  (:map org-tree-slide-mode-map
        ("<f9>" . 'org-tree-slide-move-previous-tree)
        ("<f10>" . 'org-tree-slide-move-next-tree)
        ("<f11>" . 'org-tree-slide-content))
  (:map org-mode-map
        ("<f8>" . 'org-tree-slide-mode)
        ("S-<f8>" . 'org-tree-slide-skip-done-toggle))
  :config
  (setq org-tree-slide-skip-outline-level 4)
  (org-tree-slide-narrowing-control-profile)
  (setq org-tree-slide-skip-done nil)
)

(provide 'config-org-present)
;;; config-org-present.el ends here
#+end_src

#+begin_src emacs-lisp :tangle config.el :mkdirp yes
(require 'config-org-present)
#+end_src

*** Roam
For Zettelkasten note taking.
#+begin_src emacs-lisp :tangle lisp/config-org-roam.el :mkdirp yes
;;; config-org-roam.el -*- lexical-binding: t; -*-

(use-package! org-roam
  :after org-roam
  :init
  (setq org-roam-directory org-directory
        org-roam-index-file "index.org"
        org-roam-graph-extra-config '(("overlap" . "false")) ; man dot for attributes setup
        )
  :bind
  (:map org-mode-map
        (("C-c r R" . org-roam-buffer-toggle)
         ("C-c r ." . org-roam-node-find)
         ("C-c r L" . org-roam-store-link)
         ("C-c r a" . org-roam-alias-add)
         ("C-c r u" . org-roam-unlinked-references)
         ("C-c r r" . org-roam-find-ref)
         ("C-c r d" . org-roam-find-directory)
         ("C-c r j" . org-roam-jump-to-index)
         ("C-c r b" . org-roam-switch-to-buffer)
         ("C-c r n" . orb-note-actions)
         ("C-c r i" . org-roam-node-insert)
         )
  )
  :config
  (add-to-list 'display-buffer-alist
                '("\\*org-roam\\*"
                  (display-buffer-in-direction)
                  (direction . right)
                  (window-width . 0.33)
                  (window-height . fit-window-to-buffer)))
  (setq org-roam-extract-new-file-path "${slug}.org")
  (org-roam-db-autosync-mode)
  (setq org-roam-node-display-template
        (format "${doom-hierarchy:*} %s %s"
                (propertize "${doom-type:12}" 'face 'font-lock-keyword-face)
                (propertize "${doom-tags:32}" 'face 'org-tag)))
  (setq org-roam-capture-templates
        '(
          ("d" "default quick note" plain "%?"
           :if-new (file+head "${slug}.org"
                              "# -*- truncate-lines: t -*-\n#+title: ${title}\n#+startup: content\n#+created: %U\n")
           :unnarrowed t)
          ("l" "Note for latex export" plain "%?"
           :if-new (file+head "${slug}.org" "# -*- truncate-lines: t -*-
#+title: ${title}
#+startup: content
#+created: %U\n
#+latex_compiler: pdflatex
#+latex_class: article
#+latex_header: \\usepackage[hmargin=1.0in, top=1.0in, bottom=0.7in]{geometry}
#+latex_header: \\usepackage[maxnames=3,style=nature,date=year,url=false,isbn=false,articletitle=false]{biblatex}
#+latex_header: \\addbibresource{~/database/bibliography.bib}
# include commands preset
#+setupfile: lh_symbols.org
#+setupfile: lh_biblatex.org
#+options: toc:nil tags:nil title:t email:nil author:t date:t

# a link-colored toc
#+latex: {\\hypersetup{linkcolor=Blue}\\tableofcontents}
#+latex: \\clearpage\n\n* References\n#+latex: \\printbibliography[heading=none]")
           :unnarrowed t)
          ("b" "non-STEM book note" plain "%?"
           :if-new (file+head "bookrev/${slug}.org"
           "# -*- truncate-lines: t -*-\n#+title: ${title}\n#+startup: overview\n#+created: %U\n#+options: toc:nil email:t f:t\n")
           :unnarrowed t)
         ))
)
#+end_src

~org-roam-bibtex~ plugin to interact org-roam with org-ref and citar.
#+begin_src emacs-lisp :tangle packages.el :mkdirp yes
(package! org-roam-bibtex
  :recipe (:host github :repo "org-roam/org-roam-bibtex"))
(unpin! org-roam)
(package! citar-org-roam)
#+end_src

Note that here I bind ~org-roam-bibtex-mode~ to ~org-mode~, such that
whenever I tries to open note from org-ref link, notes will be searched by orb.
#+begin_src emacs-lisp :tangle lisp/config-org-roam.el :mkdirp yes
(use-package! org-roam-bibtex
  :after org
  :hook
  (org-mode . org-roam-bibtex-mode)
  :config
  (require 'org-ref)
  ; (setq org-ref-notes-function 'orb-edit-notes)
  (setq orb-preformat-keywords
    '("citekey"  "title" "author-or-editor" "date" "doi" "file" "journaltitle" "volume" "pages"))
  ; (setq orb-roam-ref-format "org-ref-v3")
  (advice-add 'bibtex-completion-candidates :filter-return 'reverse)
  ; anystyle-related
  (setq orb-autokey-format "%A*[1]%y*"
        orb-pdf-scrapper-export-fields '("author" "journal" "date" "volume" "pages" "title"))
  (add-to-list 'org-roam-capture-templates
          '("r" "reference" plain "%?"
           :if-new (file+head
           "ref/note-${citekey}.org"
           ":PROPERTIES:
:TITLE: ${title}
:AUTHOR: ${author-or-editor}
:JOURNAL: ${journaltitle}
:DATE: ${date}
:VOLUME: ${volume}
:PAGES: ${pages}
:DOI: [[doi:%(replace-regexp-in-string \" \" \"\" \"${doi}\")]]
:END:
#+title: ${citekey}: ${title}
#+startup: content
#+created: %U

,* Summary Notes

,* Noter Notes :noter:
:PROPERTIES:
:NOTER_DOCUMENT: ${file}
:END:
"
           )
           :unnarrowed t))
  ;;; connect to citar by citar-org-roam
  (require 'citar-org-roam)
  (citar-register-notes-source
   'orb-citar-source (list :name "Org-Roam Notes"
          :category 'org-roam-node
          :items #'citar-org-roam--get-candidates
          :hasitems #'citar-org-roam-has-notes
          :open #'citar-org-roam-open-note
          :create #'orb-citar-edit-note
          :annotate #'citar-org-roam--annotate))
  (setq citar-notes-source 'orb-citar-source)
)
#+end_src

Finish the configuration
#+begin_src emacs-lisp :tangle lisp/config-org-roam.el :mkdirp yes
(provide 'config-org-roam)
;;; config-org-roam.el ends here
#+end_src
and include in the main config
#+begin_src emacs-lisp :tangle config.el
(require 'config-org-roam)
#+end_src

*** noter

Use the new maintained repository
#+begin_src emacs-lisp :tangle packages.el
(when (modulep! :lang org +noter)
  (package! org-noter :recipe
    (:host github :repo "org-noter/org-noter"
     :files ("*.el" "modules/*.el")))
  ;; djvu/nov package required by org-noter-djvu/nov
  (package! djvu)
  (package! nov))
#+end_src

#+begin_src emacs-lisp :tangle lisp/config-org-noter.el :mkdirp yes
;;; config-org-noter.el -*- lexical-binding: t; -*-

(after! org-noter
  (setq org-noter-always-create-frame nil  ;; Please stop opening frames
        org-noter-hide-other nil           ;; I want to see the whole file

        ;; Everything is relative to the main notes file
        org-noter-notes-search-path (list my/org-dir)

        ;; split fraction. default (0.5 . 0.5). slightly larger on vertical
        org-noter-doc-split-fraction '(0.58 . 0.5)
  )
)

(provide 'config-org-noter)
;;; config-org-noter.el ends here
#+end_src

#+begin_src emacs-lisp :tangle config.el
(require 'config-org-noter)
#+end_src

** Tools
*** Projectile

#+begin_src emacs-lisp :tangle lisp/config-projectile.el :mkdirp yes
;;; config-projectile.el -*- lexical-binding: t; -*-
(use-package! projectile
  :custom
  (projectile-project-search-path (list "~/projects")))

(provide 'config-projectile)
;;; config-projectile.el ends here
#+end_src

#+begin_src emacs-lisp :tangle config.el
(require 'config-projectile)
#+end_src

*** command-log-mode
#+begin_src emacs-lisp :tangle packages.el
(package! command-log-mode)
#+end_src

#+begin_src emacs-lisp :tangle lisp/config-command-log-mode.el :mkdirp yes
;;; config-command-log-mode.el -*- lexical-binding: t; -*-
(use-package! command-log-mode)

(provide 'config-command-log-mode)
;;; config-command-log-mode.el ends here
#+end_src

#+begin_src emacs-lisp :tangle config.el
(require 'config-command-log-mode)
#+end_src

*** dictionary
#+begin_src emacs-lisp :tangle packages.el
(if IS-MAC
  (package! osx-dictionary))
#+end_src

#+begin_src emacs-lisp :tangle lisp/config-dictionary.el :mkdirp yes
;;; config-dictionary.el -*- lexical-binding: t; -*-
(if IS-MAC
  (progn
    (use-package! osx-dictionary
      :bind
      (:map global-map
            ("C-c d" . osx-dictionary-search-word-at-point))
      :config
    )
  )
)

(provide 'config-dictionary)
;;; config-dictionary.el ends here
#+end_src

#+begin_src emacs-lisp :tangle config.el
(require 'config-dictionary)
#+end_src

*** rg

#+begin_src emacs-lisp :tangle packages.el
(package! rg)
(package! color-rg)
#+end_src

#+begin_src emacs-lisp :tangle lisp/config-rg.el :mkdirp yes
;;; config-rg.el -*- lexical-binding: t; -*-

(use-package! rg
  :config
  (setq rg-keymap-prefix "\C-cg")
  (setq rg-ignore-case 'smart)
  (rg-enable-default-bindings)
  (map! :leader
        (:prefix-map "s"
          (:prefix-map ("g" . "ripgrep")
           :desc "rg"                  "g"  #'rg
           :desc "rg-menu"             "m"  #'rg-menu
           :desc "Cursor word"         "w"  #'rg-dwim
           :desc "Cursor Word (file)"  "f"  #'rg-dwim-current-file)))
)

(provide 'config-rg)
;;; config-rg.el ends here
#+end_src

#+begin_src emacs-lisp :tangle config.el
(require 'config-rg)
#+end_src

*** PDF

#+begin_src emacs-lisp :tangle lisp/config-pdf.el :mkdirp yes
;;; config-pdf.el -*- lexical-binding: t; -*-
(after! pdf-view
  (map! :map pdf-view-mode-map
        :nv "z g"        #'pdf-view-goto-page
        :nv "z r"        #'image-rotate       ;; rotate the page (defined in image.el)
        :nv "SPC a a l"  #'pdf-annot-list-annotations
        :nv "SPC a a h"  #'pdf-annot-add-highlight-markup-annotation
        :nv "SPC a a u"  #'pdf-annot-add-underline-markup-annotation
        )
)

(after! pdf-tools
  :config
  ;; activate when opening pdf, otherwise the evil keybindings will not work
  (pdf-loader-install)
)

(provide 'config-pdf)
;;; config-pdf.el ends here
#+end_src

#+begin_src emacs-lisp :tangle config.el
(require 'config-pdf)
#+end_src

*** RSS by elfeed

#+begin_src emacs-lisp :tangle lisp/config-rss.el :mkdirp yes
;;; config-rss.el -*- lexical-binding: t; -*-

(after! elfeed
  ;; override default 2-week-ago filter by doom emacs
  (setq elfeed-search-filter "")
)

(use-package! elfeed-org
  :after org
  :preface
  (setq rmh-elfeed-org-files `(,(expand-file-name "elfeed.org" org-directory)))
)

(provide 'config-rss)
;;; config-rss.el ends here
#+end_src

#+begin_src emacs-lisp :tangle config.el
(require 'config-rss)
#+end_src

*** Git: magit, git-gutter

#+begin_src emacs-lisp :tangle lisp/config-git.el :mkdirp yes
;;; config-git.el -*- lexical-binding: t; -*-

;; use "SPC g a" for add hunk, aside from the default "SPC g s"
(map! :leader
      (:prefix-map ("g" . "git")
       (:when (modulep! :ui vc-gutter)
        :desc "stage hunk at point"       "a"   #'+vc-gutter/stage-hunk)))

;; do not ask confirm for stage/revert
(after! git-gutter
  (setq git-gutter:ask-p nil))

(provide 'config-git)
;;; config-git.el ends here
#+end_src

#+begin_src emacs-lisp :tangle config.el
(require 'config-git)
#+end_src

*** Blog writing
Add packages
#+begin_src emacs-lisp :tangle packages.el
(package! easy-hugo)
(package! easy-jekyll)
#+end_src

#+begin_src emacs-lisp :tangle lisp/config-blog.el :mkdirp yes
;;; config-blog.el -*- lexical-binding: t; -*-
#+end_src

~easy-hugo~
#+begin_src emacs-lisp :tangle lisp/config-blog.el :mkdirp yes
(use-package! easy-hugo
  :config
  (easy-hugo-enable-menu)
)
#+end_src

#+begin_src emacs-lisp :tangle lisp/config-blog.el :mkdirp yes
(provide 'config-blog)
;;; config-blog.el ends here
#+end_src

#+begin_src emacs-lisp :tangle config.el
(require 'config-blog)
#+end_src


* Customizations

#+begin_src emacs-lisp :tangle custom.el
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(safe-local-variable-values
   '((org-latex-and-related-regexp)
     (org-highlight-latex-and-related)
     (org-drill-hide-item-headings-p . t)
     (org-latex-hyperref-template)))
)
#+end_src
